# Standart Matchers
    it 'initial student number was changed successful' do
      expect { student.change_sid(100) }
        .to change { student.s_id }
        .from(123).to(100)
    end
    
    it 'date_month is in correct format' do
      regex = /(1|2|3|4|5|6|7|8|9|10|11|12){1}$/
      expect(!temp_exams2.date_month[regex].nil?).to be_truthy
    end
    
    it 'date_day is in correct format' do
      regex = /(1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17){1}$/
      expect(!temp_exams2.date_day[regex].nil?).to be true
    
    it 'added successful to list' do
      item.add_notification(notification)
      expect(item.notifications).not_to be_empty
    end

    it 'list size increased' do
      expect do
        item.add_notification(
          notification
        )
      end.to change { item.notifications.length }.by(1)
    end

    it 'date format correct ' do
      item.add_notification(notification)
      expect(item.notifications[
                 item.notifications.length - 1].date).to match(/\d{4}-([0]\d|[1][012])-[0123]\d/)
    end
    
    it 'add with current date' do
      item.add_notification_now('title', 'text', 'sender')
      expect(item.notifications[
                 item.notifications.length - 1].date).to eq Date.today.to_s
    end
    
    it 'subject_name is not empty' do
      expect(temp_schedule2.subject_name).not_to be_nil
    end
    
    
    it 'phone number is less than 13 characters' do
      expect(user.phone.length).to be < 13
    end
    
    it 'added successful' do
      item.add_notification(notification)
      expect(item.notifications[item.notifications.length - 1]).to be_instance_of(Notification)
    end
    
    it 'date_month is not of type Integer' do
      expect(temp_exams2.date_month).not_to be_instance_of(Integer)
    end
    
    expect { item.print_notifications }.to output(str).to_stdout
    
    it 'check if array empty' do
      expect(student.subjects.empty?).to be false
    end
    
    it 'teacher is on vacation' do
      expect { teacher.goes_on_vacation(true) }
        .to change { teacher.on_vacation }
        .from(false).to(true)
    end
    
    it 'ID set correct start' do
      expect(teacher.id).to start_with 't'
    end
    
    it ' student change_faculty change successful' do
      expect { student.change_faculty('FF') }
        .to change { student.faculty }
        .from('MIF').to('FF')
    end
    
    it ' student study_program change was successful' do
      expect { student.change_study_program('PS') }
        .to change { student.study_program }
        .from('Informatika').to('PS')
    end
    
    it 'initial student number was set successful' do
      expect(student.s_id).to start_with 's'
    end
    
    it ' student group change unsuccessful' do
      student.change_group(-15)
      expect(student.group).to be > -15
    end
    
    it 'save student read student id' do
      stud.save_student(path_to_db)
      stud.change_sid(111)
      stud.load_student(path_to_db)
      expect(stud.s_id).to be > 111
    end

    it 'save student read student group' do
      stud.save_student(path_to_db)
      stud.change_group(111)
      stud.load_student(path_to_db)
      expect(stud.group).to be < 111
    end

# Custom Matchers
